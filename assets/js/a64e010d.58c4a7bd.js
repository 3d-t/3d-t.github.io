(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6853],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(h,i(i({ref:t},l),{},{components:n})):r.createElement(h,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7593:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:70},c="Tuya",u={unversionedId:"integrations/tuya",id:"integrations/tuya",isDocsHomePage:!1,title:"Tuya",description:"Tuya is a provider of smart devices such as LED lamps, power switches and other devices. These devices can be controlled by a Tuya app but Tuya also supports an API for controlling these devices by other applications. The Tuya integration is a bi-directional integration allowing you to read values from sensors and controls switches and lights. The integration is implemented as a Docker web service and uses the open source @tuya/tuya-connector-nodejs package.",source:"@site/docs/integrations/tuya.md",sourceDirName:"integrations",slug:"/integrations/tuya",permalink:"/docs/integrations/tuya",version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70},sidebar:"defaultSidebar",previous:{title:"Zwave",permalink:"/docs/integrations/zwave"},next:{title:"Nefit",permalink:"/docs/integrations/nefit"}},l=[{value:"Web service",id:"web-service",children:[]},{value:"Data source",id:"data-source",children:[]},{value:"Importer",id:"importer",children:[]},{value:"Exporter",id:"exporter",children:[]}],p={toc:l};function d(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tuya"},"Tuya"),(0,o.kt)("p",null,"Tuya is a provider of smart devices such as LED lamps, power switches and other devices. These devices can be controlled by a Tuya app but Tuya also supports an API for controlling these devices by other applications. The Tuya integration is a bi-directional integration allowing you to read values from sensors and controls switches and lights. The integration is implemented as a Docker web service and uses the open source ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tuya/tuya-connector-nodejs"},"@tuya/tuya-connector-nodejs")," package."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Usage: Connect with Tuya Smartlife devices")),(0,o.kt)("h2",{id:"web-service"},"Web service"),(0,o.kt)("p",null,"To install the Tuya web service on your local cluster run: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm install 3d-t/tuya tuya\n")),(0,o.kt)("h2",{id:"data-source"},"Data source"),(0,o.kt)("p",null,"For the Tuya service you need an access key and a secretKey. You can obtain these keys via a free registration as a Tuya cloud developer. In the field ",(0,o.kt)("inlineCode",{parentName:"p"},"service")," enter the hostname of where the Tuya webservice is running locally. The field ",(0,o.kt)("inlineCode",{parentName:"p"},"baseUrl")," specifies the data center where your devices are registered. "),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(7789).Z})),(0,o.kt)("h2",{id:"importer"},"Importer"),(0,o.kt)("p",null,"In the importer specify the secret that contains the Tuya data source and add a mapping for each device. The object ID is the ID of the device, which can be obtained via the Tuya app or developer web site. The mapping for the color maps a JSON object ",(0,o.kt)("inlineCode",{parentName:"p"},"{h: <number>, s:<number>, v:<number>}")," to the internal color representation of an array of three numbers."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(1946).Z})),(0,o.kt)("h2",{id:"exporter"},"Exporter"),(0,o.kt)("p",null,"The exporter maps the intenal value of ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," for the switch to the values ",(0,o.kt)("inlineCode",{parentName:"p"},"switch_1: true")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"switch_1: false"),". The interal color definition of an array of three numbers representing hue, saturation and brightness is converted to a JSON object ",(0,o.kt)("inlineCode",{parentName:"p"},"{h: 100, s: 200, v: 300}")," for the field ",(0,o.kt)("inlineCode",{parentName:"p"},"colour_data"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(4076).Z})),(0,o.kt)("p",null,"To test the connection select ",(0,o.kt)("inlineCode",{parentName:"p"},"States")," from the menu and search for the state of topic ",(0,o.kt)("inlineCode",{parentName:"p"},"office.htc.led.color")," and change the value from ",(0,o.kt)("inlineCode",{parentName:"p"},"[0, 200,200]"),". The led should turn red."))}d.isMDXComponent=!0},4076:function(e,t,n){"use strict";t.Z=n.p+"assets/images/exporter_tuya-5b3a401698b66cfc61740cde03a0fa20.png"},1946:function(e,t,n){"use strict";t.Z=n.p+"assets/images/importer_tuya-b078ff8acbef7a5ec0290e03c6209664.png"},7789:function(e,t,n){"use strict";t.Z=n.p+"assets/images/secret_tuya-f43d6fe7139a0be46a3d5d4e4f5b298e.png"}}]);