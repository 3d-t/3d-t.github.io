(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2513],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),d=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(c,".").concat(m)]||p[m]||l[m]||a;return n?i.createElement(h,o(o({ref:t},u),{},{components:n})):i.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9872:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var i=n(2122),r=n(9756),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:55},c="MQTT",d={unversionedId:"integrations/mqtt",id:"integrations/mqtt",isDocsHomePage:!1,title:"MQTT",description:"MQTT (Message Queuing Telemetry Transport) is a lightweight, publish-subscribe network protocol that is designed for sending data from Internet of Things (IoT) devices. It is particularly well-suited for communication between devices with limited resources, such as microcontrollers, sensors, and embedded systems. The MQTT integration uses a combination of push and pull. When data is published by a device the last received data is stored. This can either be imported immediately or it can be imported at scheduled times.",source:"@site/docs/integrations/mqtt.md",sourceDirName:"integrations",slug:"/integrations/mqtt",permalink:"/docs/integrations/mqtt",version:"current",sidebarPosition:55,frontMatter:{sidebar_position:55},sidebar:"defaultSidebar",previous:{title:"Tuya",permalink:"/docs/integrations/tuya"},next:{title:"Zwave",permalink:"/docs/integrations/zwave"}},u=[{value:"Datasource",id:"datasource",children:[]},{value:"Scheduled import",id:"scheduled-import",children:[]},{value:"Immediate import",id:"immediate-import",children:[]},{value:"Testing",id:"testing",children:[]}],l={toc:u};function p(e){var t=e.components,s=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mqtt"},"MQTT"),(0,a.kt)("p",null,"MQTT (Message Queuing Telemetry Transport) is a lightweight, publish-subscribe network protocol that is designed for sending data from Internet of Things (IoT) devices. It is particularly well-suited for communication between devices with limited resources, such as microcontrollers, sensors, and embedded systems. The MQTT integration uses a combination of push and pull. When data is published by a device the last received data is stored. This can either be imported immediately or it can be imported at scheduled times. "),(0,a.kt)("h2",{id:"datasource"},"Datasource"),(0,a.kt)("p",null,"Create a new secret and set the field ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"mqtt"),". Enter the MQTT host and optionally a username and password if the MQTT server needs authentication. Create a field ",(0,a.kt)("inlineCode",{parentName:"p"},"topic")," and enter the name of the topic to subscribe to:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(1329).Z})),(0,a.kt)("h2",{id:"scheduled-import"},"Scheduled import"),(0,a.kt)("p",null,"Create a new connector and enter the name of the secrets in the field ",(0,a.kt)("inlineCode",{parentName:"p"},"Datasource"),". Create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Object")," and map the topic to the MQTT topic, in this case ",(0,a.kt)("inlineCode",{parentName:"p"},"office/room_112"),". Create a key to map the value of the topic and add a key ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," to use the time that the topic was updated. If no field ",(0,a.kt)("inlineCode",{parentName:"p"},"time")," is specified the current time at the moment of import is used, which may be later than the time that the data was received. Click on ",(0,a.kt)("inlineCode",{parentName:"p"},"test")," to check the data is imported. "),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(2962).Z})),(0,a.kt)("p",null,"You can now set a schedule for importing the date, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"Every minute"),". This means that data is imported every minute regardless of the frequency that the MQTT data is received. This prevents that large amounts of logging data is created when an MQTT device publishes at high frequency and also prevents data overload. Scheduled imports are suitable for data that does not change frequencly, such as room temperature or humidity."),(0,a.kt)("h2",{id:"immediate-import"},"Immediate import"),(0,a.kt)("p",null,"To immediately process incoming data you can set the schedule to ",(0,a.kt)("inlineCode",{parentName:"p"},"Continuous"),". In this case the connector is run immediately when data is published to the topic and subtopics specified in the datasource. This option is most suited for device input that needs immediate action such as intrusion detection devices."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(644).Z})),(0,a.kt)("h2",{id:"testing"},"Testing"),(0,a.kt)("p",null,"To test the connector you can use a MQTT client to publish data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_pub \nmosquitto_pub -h [HOST] -u [USERNAME] -P [PASSWORD] -t 'office/room_112/temperature' -m 19\nmosquitto_pub -h [HOST] -u [USERNAME] -P [PASSWORD] -t 'office/room_112/humidity' -m 30\n")))}p.isMDXComponent=!0},2962:function(e,t,n){"use strict";t.Z=n.p+"assets/images/connector_mqtt_single_value-6132d8e5cd4081d4714de1dfdc6d65af.png"},644:function(e,t,n){"use strict";t.Z=n.p+"assets/images/connector_mqtt_single_value_immediate-44cb6461dc78c8466fb39bbaa6026880.png"},1329:function(e,t,n){"use strict";t.Z=n.p+"assets/images/secret_mqtt_office-86eee0536c056c1e4b01b5ee7c54def5.png"}}]);