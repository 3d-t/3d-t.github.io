"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[772],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,g=d["".concat(s,".").concat(h)]||d[h]||m[h]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},73150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const i={sidebar_position:500},o="Vehicle tracking",l={unversionedId:"mapping/realtime",id:"mapping/realtime",title:"Vehicle tracking",description:"Maps can be used to show real time positions of vehicles. In this example we create a 3D version of the Flightradar24 app. For this we need a script to collect real-time flight information from the OpenSky Network API. The script collects data in JSON format and a connector is used to create and update topics. The airplane is displayed as a 3D solid with a 2D label and a form is created to show the real-time data when the user clicks on an airplane.",source:"@site/docs/mapping/realtime.md",sourceDirName:"mapping",slug:"/mapping/realtime",permalink:"/docs/mapping/realtime",draft:!1,tags:[],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500},sidebar:"defaultSidebar",previous:{title:"SpaceTime data",permalink:"/docs/mapping/values"},next:{title:"Introduction",permalink:"/docs/video"}},s={},p=[{value:"Script",id:"script",level:2},{value:"Solid",id:"solid",level:2},{value:"Connector",id:"connector",level:2},{value:"Form",id:"form",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...i}=e;return(0,r.yg)(d,(0,a.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"vehicle-tracking"},"Vehicle tracking"),(0,r.yg)("p",null,"Maps can be used to show real time positions of vehicles. In this example we create a 3D version of the ",(0,r.yg)("a",{parentName:"p",href:"https://www.flightradar24.com/"},"Flightradar24")," app. For this we need a script to collect real-time flight information from the ",(0,r.yg)("a",{parentName:"p",href:"https://openskynetwork.github.io/opensky-api/rest.html#"},"OpenSky Network API"),". The script collects data in JSON format and a connector is used to create and update topics. The airplane is displayed as a 3D solid with a 2D label and a form is created to show the real-time data when the user clicks on an airplane. "),(0,r.yg)("p",null,(0,r.yg)("img",{src:n(36124).A,width:"1200",height:"750"})),(0,r.yg)("h2",{id:"script"},"Script"),(0,r.yg)("p",null,"To collect information about all aircraft in a geographical area you can use the free OpenSky API. Note that if you do not have an API key there is a rate limit on the number of requests. In this example the geographical area is hardcoded, but it could also be defined by the ",(0,r.yg)("inlineCode",{parentName:"p"},"object")," input parameter."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"const get = async (object, context) => {\n    let begin = Math.ceil(new Date().getTime() / 1000) - 100000\n    let end = begin + 100000\n    url = `https://opensky-network.org/api/states/all?lamin=51.0&lomin=5.1&lamax=51.6&lomax=5.5`\n    let response = await http.get(url)\n    let result = []\n    for (let state of response.states) {\n      result.push({\n        \n        icao24: state[0],\n        callsign: state[1].trim(),\n        velocity: state[9],\n        latitude: state[6],\n        longitude: state[5],\n        altitude: state[7],\n        track: state[10]\n      })\n    }\n    return result\n}\n")),(0,r.yg)("h2",{id:"solid"},"Solid"),(0,r.yg)("p",null,"To display a 3D model of a plane we create a new solid in ",(0,r.yg)("inlineCode",{parentName:"p"},"programming")," mode. The solid has one parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"callsign")," and uses the ",(0,r.yg)("inlineCode",{parentName:"p"},"label")," function to draw a 2D label on top of the 3D screen. You can enter any HTML text in the label. In this example it is just the call sign of the aircraft that is imported from OpenSky."),(0,r.yg)("p",null,(0,r.yg)("img",{src:n(83319).A,width:"1200",height:"750"})),(0,r.yg)("h2",{id:"connector"},"Connector"),(0,r.yg)("p",null,"Create a new secret called ",(0,r.yg)("inlineCode",{parentName:"p"},"OpenSky")," and set the ",(0,r.yg)("inlineCode",{parentName:"p"},"type")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"script")," and set the ",(0,r.yg)("inlineCode",{parentName:"p"},"script")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"OpenSky"),". Enter the name of the secret as the data source in the connector."),(0,r.yg)("p",null,(0,r.yg)("img",{src:n(16434).A,width:"3010",height:"1648"})),(0,r.yg)("h2",{id:"form"},"Form"),(0,r.yg)("p",null,"When you click on one of the airplanes on the map you can show a form with the real time data. The form definition below shows how you can extract the altitude from the ",(0,r.yg)("inlineCode",{parentName:"p"},"position")," field, using the JavaScript ",(0,r.yg)("inlineCode",{parentName:"p"},"split")," function. The altitude is converted from meters to feet. The speed in ",(0,r.yg)("inlineCode",{parentName:"p"},"m/s")," is converted to ",(0,r.yg)("inlineCode",{parentName:"p"},"knots"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"Airplane\n\ncallsign\n<callsign\n|12\n\naltitude\n<+position.split(',')[2]*3.28084\n[0000 ft]\n|4\n\nspeed\n<speed*1.94\n[000 kt]\n|4\n\ntrack\n<Math.round(heading)\n[000 deg]\n|4\n")),(0,r.yg)("p",null,(0,r.yg)("img",{src:n(6427).A,width:"1200",height:"750"})))}m.isMDXComponent=!0},83319:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/map_airplane-ada86c439ce6dcf165a90dab6bbba22c.png"},36124:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/map_airplanes-cdab760b889cd598a16f2b90fa400152.png"},6427:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/map_airplanes_form-a5140b03ab30be0b29f53fc20625ce82.png"},16434:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/map_opensky_connector-921553e5ab0f576d018797a79a11b2ec.png"}}]);