"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9977],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var o=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),u=i,g=c["".concat(l,".").concat(u)]||c[u]||m[u]||a;return t?o.createElement(g,r(r({ref:n},d),{},{components:t})):o.createElement(g,r({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2135:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(9668),i=(t(6540),t(5680));const a={sidebar_position:40},r="Solids",s={unversionedId:"digitaltwin/solids",id:"digitaltwin/solids",title:"Solids",description:"In the previous examples we have imported GTLF and IFC models created in CAD systems and shown how we can place simple blocks on a map. With the build-in solid modeler you can make 3D objects and animations without the need for a third-party CAD package. 3D objects are created with a visual programming language similar to the one used for automation and monitoring.",source:"@site/docs/digitaltwin/solids.md",sourceDirName:"digitaltwin",slug:"/digitaltwin/solids",permalink:"/docs/digitaltwin/solids",draft:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Cesium",permalink:"/docs/digitaltwin/cesium"},next:{title:"Parts",permalink:"/docs/digitaltwin/parts"}},l={},p=[{value:"Primitives",id:"primitives",level:2},{value:"Transformations",id:"transformations",level:2},{value:"Boolean operations",id:"boolean-operations",level:2}],d={toc:p},c="wrapper";function m(e){let{components:n,...a}=e;return(0,i.yg)(c,(0,o.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"solids"},"Solids"),(0,i.yg)("p",null,"In the previous examples we have imported GTLF and IFC models created in CAD systems and shown how we can place simple blocks on a map. With the build-in solid modeler you can make 3D objects and animations without the need for a third-party CAD package. 3D objects are created with a visual programming language similar to the one used for automation and monitoring.   "),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note"),": For more detailed information on how to build objects with the build-in modeler see ",(0,i.yg)("a",{parentName:"p",href:"https://www.solid.engineer"},"https://solid.engineer"),"."),(0,i.yg)("h2",{id:"primitives"},"Primitives"),(0,i.yg)("p",null,"Click on the sidemenu ",(0,i.yg)("inlineCode",{parentName:"p"},"Solids")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Admin")," section and create a new solid. Click on the ",(0,i.yg)("inlineCode",{parentName:"p"},"primitives")," and drag and drop one of the basic shapes into the workspace. You can set the dimensions by changing the numbers. "),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(6017).A,width:"2732",height:"1802"})),(0,i.yg)("h2",{id:"transformations"},"Transformations"),(0,i.yg)("p",null,"To define the position of shapes you can use transformations and rotations.  Click on the menu ",(0,i.yg)("inlineCode",{parentName:"p"},"Transform")," and drag and drop commands for ",(0,i.yg)("inlineCode",{parentName:"p"},"move")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"turn")," to move or rotate relative to the current position. Use ",(0,i.yg)("inlineCode",{parentName:"p"},"position")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"rotation")," to specify a fixed value in 3D space."),(0,i.yg)("h2",{id:"boolean-operations"},"Boolean operations"),(0,i.yg)("p",null,"You can combine primitives into more complex shapes by using ",(0,i.yg)("inlineCode",{parentName:"p"},"add"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"subtract")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"intersect")," operations. In the example below we added a box and a cube. Click on ",(0,i.yg)("inlineCode",{parentName:"p"},"Combine")," and drag the operation to the workspace. In the upper position drag a box and in the lower position drag a ",(0,i.yg)("inlineCode",{parentName:"p"},"material"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"move")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"sphere")," block. You can now select one of the combine operations. The ",(0,i.yg)("inlineCode",{parentName:"p"},"intersect")," takes the common part of the two basic shapes. This shape looks like a dice. The ",(0,i.yg)("inlineCode",{parentName:"p"},"subtract")," operations subtracts the sphere from the block and looks like the third shape. "),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(259).A,width:"2732",height:"1802"})))}m.isMDXComponent=!0},259:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/modeler_solids_boolean-41968f7059bc618e05822286c8a2dfb4.png"},6017:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/modeler_solids_shapes-ecf83d8ef25828d849828d6810fd57a9.png"}}]);