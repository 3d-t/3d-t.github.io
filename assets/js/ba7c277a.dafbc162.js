"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3515],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(t),h=i,y=g["".concat(s,".").concat(h)]||g[h]||c[h]||r;return t?a.createElement(y,o(o({ref:n},d),{},{components:t})):a.createElement(y,o({ref:n},d))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},94065:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(58168),i=(t(96540),t(15680));const r={sidebar_position:80},o="Text Mode",l={unversionedId:"drawings/text",id:"drawings/text",title:"Text Mode",description:"In Text Mode you can create a drawing by entering statements in JavaScript instead of dragging blocks from a visual workspace. You can use the full functionality of modern JavaScript including maps, arrow functions and regular expressions. The text mode makes is easy to cut and paste code from other drawings and to use JavaScript functionality that is not supported in the Visual Mode.",source:"@site/docs/drawings/text.md",sourceDirName:"drawings",slug:"/drawings/text",permalink:"/docs/drawings/text",draft:!1,tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80},sidebar:"defaultSidebar",previous:{title:"Visual Mode",permalink:"/docs/drawings/visual"},next:{title:"Libraries",permalink:"/docs/drawings/libraries"}},s={},p=[{value:"Elements",id:"elements",level:2},{value:"Line",id:"line",level:3},{value:"Rectangle",id:"rectangle",level:3},{value:"Circle",id:"circle",level:3},{value:"Arc",id:"arc",level:3},{value:"Text",id:"text",level:3},{value:"Polygon",id:"polygon",level:3},{value:"Polyline",id:"polyline",level:3},{value:"Part",id:"part",level:3},{value:"Modifiers",id:"modifiers",level:2},{value:"Stoke",id:"stoke",level:3},{value:"Fill",id:"fill",level:3},{value:"Fonts size",id:"fonts-size",level:3},{value:"Transformations",id:"transformations",level:2},{value:"Translate",id:"translate",level:3},{value:"Rotate",id:"rotate",level:3},{value:"Scale",id:"scale",level:3},{value:"Clip",id:"clip",level:2},{value:"Examples",id:"examples",level:2},{value:"SVG",id:"svg",level:2}],d={toc:p},g="wrapper";function c(e){let{components:n,...r}=e;return(0,i.yg)(g,(0,a.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"text-mode"},"Text Mode"),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"Text Mode")," you can create a drawing by entering statements in JavaScript instead of dragging blocks from a visual workspace. You can use the full functionality of modern JavaScript including maps, arrow functions and regular expressions. The text mode makes is easy to cut and paste code from other drawings and to use JavaScript functionality that is not supported in the ",(0,i.yg)("inlineCode",{parentName:"p"},"Visual Mode"),"."),(0,i.yg)("h2",{id:"elements"},"Elements"),(0,i.yg)("p",null,"The following functions are used to create new geometry. When a\nfunction is called, a new element is created with the default settings for color, line width and fill. "),(0,i.yg)("h3",{id:"line"},"Line"),(0,i.yg)("p",null,"Draw a line from ",(0,i.yg)("inlineCode",{parentName:"p"},"x1,y1")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"x2,y2"),". The width of the line is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"line(x1, y1, x2, y2)\n")),(0,i.yg)("h3",{id:"rectangle"},"Rectangle"),(0,i.yg)("p",null,"Draw a rectangle at position ",(0,i.yg)("inlineCode",{parentName:"p"},"x, y")," with dimensions ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"height")," and an optional parameter to set the radius for rounding the corners.  The width of the border is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the border color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. The color of the inside is set with ",(0,i.yg)("inlineCode",{parentName:"p"},"fill"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"rectangle(x, y, width, height, r = 0)\n")),(0,i.yg)("h3",{id:"circle"},"Circle"),(0,i.yg)("p",null,"Draw a circle at position ",(0,i.yg)("inlineCode",{parentName:"p"},"x,y")," with a radius ",(0,i.yg)("inlineCode",{parentName:"p"},"r"),".\nThe width of the border is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the border color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. The color of the inside is set with ",(0,i.yg)("inlineCode",{parentName:"p"},"fill"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"circle(x, y, r) \n")),(0,i.yg)("h3",{id:"arc"},"Arc"),(0,i.yg)("p",null,"Draw an arc at position ",(0,i.yg)("inlineCode",{parentName:"p"},"x,y")," with a radius ",(0,i.yg)("inlineCode",{parentName:"p"},"r")," and an angle ",(0,i.yg)("inlineCode",{parentName:"p"},"startAngle")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"endAngle"),".",(0,i.yg)("br",{parentName:"p"}),"\n","The width of the border is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the border color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. The color of the inside is set with ",(0,i.yg)("inlineCode",{parentName:"p"},"fill"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"arc(x, y, r, startAngle, endAngle) \n")),(0,i.yg)("h3",{id:"text"},"Text"),(0,i.yg)("p",null,"Draw a text defined by the parameter ",(0,i.yg)("inlineCode",{parentName:"p"},"text"),", with an optional parameter to set the 'x' and 'y' position, and an optional parameter to set the angle 'a'.  The font size is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"fontSize")," function and the color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"text(text, x = 0, y = 0, a = 0)\n")),(0,i.yg)("h3",{id:"polygon"},"Polygon"),(0,i.yg)("p",null,"Draw a polygon defined by the parameter ",(0,i.yg)("inlineCode",{parentName:"p"},"points"),", where each point is an array of two numbers ",(0,i.yg)("inlineCode",{parentName:"p"},"[x, y]"),".  The width of the border is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the border color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. The color of the inside is set with ",(0,i.yg)("inlineCode",{parentName:"p"},"fill"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"polygon(points[][])\n")),(0,i.yg)("h3",{id:"polyline"},"Polyline"),(0,i.yg)("p",null,"Draw a polyline defined by the parameter ",(0,i.yg)("inlineCode",{parentName:"p"},"points"),", where each point is an array of two numbers ",(0,i.yg)("inlineCode",{parentName:"p"},"[x, y]"),".  The width of the border is set via the ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," function and the border color is set with the ",(0,i.yg)("inlineCode",{parentName:"p"},"stoke")," function. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"polyline(points[][])\n")),(0,i.yg)("h3",{id:"part"},"Part"),(0,i.yg)("p",null,"Include a drawing from another library. The name parameter is the name of the part, optionally preceded by the name of the library, separated by a dot. For example, ",(0,i.yg)("inlineCode",{parentName:"p"},"library.part")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"mylib.mylib.part"),". The parameters can be used to pass parameters to the drawing. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"part(name, parameters...)\n")),(0,i.yg)("h2",{id:"modifiers"},"Modifiers"),(0,i.yg)("p",null,"Modifiers can be used to change the properties of the next drawing operation. When a modifier is used inside a function or block it only applies to the drawing operations in the function or block. "),(0,i.yg)("h3",{id:"stoke"},"Stoke"),(0,i.yg)("p",null,"Set the border color of the next drawing operation. The color can be defined with a hex string such as '#900000'or a named color like 'dark red'."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"stoke(color)\n")),(0,i.yg)("h3",{id:"fill"},"Fill"),(0,i.yg)("p",null,"Set the fill color of the next drawing operation. The color can be defined with a hex string such as '#900000'or a named color like 'dark red'."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"fill(color)\n")),(0,i.yg)("h3",{id:"fonts-size"},"Fonts size"),(0,i.yg)("p",null,"Set the size of the font for the next drawing operation. If not defined the default font size is 20 pixels. If the size is a number it is interpreted as pixels, if it is a string it is interpreted as a CSS size such as '12px' or '12pt'."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"fontSize(size)\n")),(0,i.yg)("h2",{id:"transformations"},"Transformations"),(0,i.yg)("h3",{id:"translate"},"Translate"),(0,i.yg)("p",null,"Move the origin of the next drawing operation to the position ",(0,i.yg)("inlineCode",{parentName:"p"},"x, y"),". "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"translate(x, y)\n")),(0,i.yg)("h3",{id:"rotate"},"Rotate"),(0,i.yg)("p",null,"Rotate the origin of the next drawing operation by the angle ",(0,i.yg)("inlineCode",{parentName:"p"},"a"),". Optionally specify the rotation center ",(0,i.yg)("inlineCode",{parentName:"p"},"x, y"),". "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"rotate(a, x, y)\n")),(0,i.yg)("h3",{id:"scale"},"Scale"),(0,i.yg)("p",null,"Scale the origin of the next drawing operation by ",(0,i.yg)("inlineCode",{parentName:"p"},"x, y"),". "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"scale(x, y)\n")),(0,i.yg)("h2",{id:"clip"},"Clip"),(0,i.yg)("p",null,"Set a clipping region for the next drawing operation. The clipping region is defined by a rectangle with position ",(0,i.yg)("inlineCode",{parentName:"p"},"x, y")," and dimensions ",(0,i.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"height"),". To reset the clipping region use the ",(0,i.yg)("inlineCode",{parentName:"p"},"clip")," function without arguments."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},"clip(x, y, width, height)\n")),(0,i.yg)("h2",{id:"examples"},"Examples"),(0,i.yg)("p",null,"The drawing below shows some examples of how to use the text mode for creating a speed tape in an aircraft. The speed tape diagram shows the current speed in a black box. The speed slider moves vertically below the box and has regions for showing the speed ranges for normal operation (green), warning (yellow) and excess speed (red). A JavaScript ",(0,i.yg)("inlineCode",{parentName:"p"},"for")," statement is used to create the moving tape with speed markers and number labels. The drawing has a variable speed with a default value of `117' that can be overridden by a user define parameter as shown in the earlier example of the compass."),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(64191).A,width:"1200",height:"750"})),(0,i.yg)("p",null,"The next example shows an artificial horizon with the terrain in grey and sky in blue. The drawing has two parameters that define the ",(0,i.yg)("inlineCode",{parentName:"p"},"pitch")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"bank")," (or roll) of the aircraft. The display is created by a blue rectangle that covers an area of 500 x 500 pixels. The terrain is drawn inside a block statement. A grey rectangle is positioned so that it matches the ",(0,i.yg)("inlineCode",{parentName:"p"},"pitch")," parameter and rotated to match the ",(0,i.yg)("inlineCode",{parentName:"p"},"bank")," parameter. The grey rectangle is clipped to the size of the blue rectangle. "),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(10631).A,width:"1200",height:"750"})),(0,i.yg)("h2",{id:"svg"},"SVG"),(0,i.yg)("p",null,"The text mode editor shows the generated SVG drawing in a viewer window. The SVG can also be called from a web page. The following example shows how to call the SVG from a web page with different parameters for the ",(0,i.yg)("inlineCode",{parentName:"p"},"pitch")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"bank")," parameters. Note that the drawing was named ",(0,i.yg)("inlineCode",{parentName:"p"},"Horizon")," and the library was set to ",(0,i.yg)("inlineCode",{parentName:"p"},"AIR"),". To generate the SVG you enter the name of the library, followed by a dot and the name of the drawing. The parameters are passed as a string in the URL. The URL is called from the HTML page below."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-htlm"},'<html>\n\n<body>\n    <table>\n        <tr >\n            <td >\n                <img src="http://localhost:8010/drawings/svg/AIR.Horizon(0, 0)" width="500" height="500">\n            </td>\n            <td>\n                <img src="http://localhost:8010/drawings/svg/AIR.Horizon(10,20)" width="500" height="500">\n            </td>\n        </tr>\n    </table>\n</body>\n\n</html>\n')),(0,i.yg)("p",null,"When the HTML page is opened in a web browser it shows the two SVG drawings with different parameters for the ",(0,i.yg)("inlineCode",{parentName:"p"},"pitch")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"bank")," angle. "),(0,i.yg)("p",null,(0,i.yg)("img",{src:t(76623).A,width:"1050",height:"525"})))}c.isMDXComponent=!0},10631:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/drawings_text_horizon-bb98f85f1187e81931b95691ad04c90e.png"},76623:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/drawings_text_horizon_html-51a2708815f084f1939f750097f03fc6.png"},64191:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/drawings_text_speed-13d1be2b975cb9e77f7f17ede94ad94f.png"}}]);