"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4758],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(a),h=r,m=c["".concat(s,".").concat(h)]||c[h]||g[h]||i;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},82477:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(58168),r=(a(96540),a(15680));const i={sidebar_position:2},o="Objects",l={unversionedId:"animation/parts",id:"animation/parts",title:"Objects",description:"Components of a digital twin can be imported as IFC or glTF files, and can also be created from scratch with the solid modeler. In this example we assume that you do not have any existing models and need to build everything yourself.",source:"@site/docs/animation/parts.md",sourceDirName:"animation",slug:"/animation/parts",permalink:"/docs/animation/parts",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Garden",permalink:"/docs/twin/garden"},next:{title:"Model",permalink:"/docs/animation/model"}},s={},d=[{value:"Bridge",id:"bridge",level:2},{value:"Doors",id:"doors",level:2},{value:"Light",id:"light",level:2},{value:"Barrier",id:"barrier",level:2},{value:"Dam",id:"dam",level:2}],p={toc:d},c="wrapper";function g(e){let{components:t,...i}=e;return(0,r.yg)(c,(0,n.A)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"objects"},"Objects"),(0,r.yg)("p",null,"Components of a digital twin can be imported as IFC or glTF files, and can also be created from scratch with the solid modeler. In this example we assume that you do not have any existing models and need to build everything yourself."),(0,r.yg)("h2",{id:"bridge"},"Bridge"),(0,r.yg)("p",null,"A draw bridge is constructed from block primitives. A parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"angle")," specifies the rotation of the bridge. A part 'Fence' is included and repeated two times so that it appears at both edges of the road. The part is named ",(0,r.yg)("inlineCode",{parentName:"p"},"Bridge")," and stored in library ",(0,r.yg)("inlineCode",{parentName:"p"},"T06"),"."),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(69515).A,width:"1200",height:"750"})),(0,r.yg)("p",null,"The main topic of the animation is ",(0,r.yg)("inlineCode",{parentName:"p"},"lock.bru")," and the topic ",(0,r.yg)("inlineCode",{parentName:"p"},"lock.bru.bridge")," contains all information on the position and orientation. The angle of the bridge is defined by the topic ",(0,r.yg)("inlineCode",{parentName:"p"},"lock.bru.bridge.angle"),". Users can specify the angle by setting a value between ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," for fully closed and ",(0,r.yg)("inlineCode",{parentName:"p"},"100")," for full opened. The special ",(0,r.yg)("inlineCode",{parentName:"p"},"geometry")," subtopic calls the solid by entering the name of the library, the name of the solid, and the parameter for the angle. This parameter is an expression that used the ",(0,r.yg)("inlineCode",{parentName:"p"},"angle")," subtopic. When the ",(0,r.yg)("inlineCode",{parentName:"p"},"angle")," is set to ",(0,r.yg)("inlineCode",{parentName:"p"},"100"),", the parameter becomes ",(0,r.yg)("inlineCode",{parentName:"p"},"90"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-JavaScript"},"lock.bru.bridge.angle: 0\nlock.bru.bridge.geometry: T06.Bridge(lock.bru.bridge.angle * 0.9)\nlock.bru.bridge.translation: -95, 22, 10\nlock.bru.bridge.rotation: 0, 0, 270\n")),(0,r.yg)("h2",{id:"doors"},"Doors"),(0,r.yg)("p",null,"The shipping lock has two sets of door, one for the lakeside and one for the seaside. Each set of doors includes four doors. The solid has a parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"angle")," that specifies the opening of the lock: ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," means fully closed and ",(0,r.yg)("inlineCode",{parentName:"p"},"90")," means fully opened. Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"angle")," parameter is not used directly to control the rotation of the doors but is used in an expression for variable ",(0,r.yg)("inlineCode",{parentName:"p"},"a")," so that the actual angle is between ",(0,r.yg)("inlineCode",{parentName:"p"},"5")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"85")," degrees, regardless of the user input. The difference between parameters and variables is that parameters can be specified externally, while variables are only used internally in the script for the solid."),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(29597).A,width:"1200",height:"750"})),(0,r.yg)("p",null,"The topics that control the lock doors on the lakeside are defined below. The status of the lock is defined by the ",(0,r.yg)("inlineCode",{parentName:"p"},"lock.bru.lake.lock.angle")," topic. The door set is moved ",(0,r.yg)("inlineCode",{parentName:"p"},"-90")," units along the x-axis."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"lock.bru.lake.lock.angle: 0\nlock.bru.lake.lock.geometry: T06.Door set(lock.bru.lake.lock.angle * 0.9)\nlock.bru.lake.lock.translation.x: -90,\n")),(0,r.yg)("h2",{id:"light"},"Light"),(0,r.yg)("p",null,"There are two light signals on the lakeside of the lock. The solid ",(0,r.yg)("inlineCode",{parentName:"p"},"Light lock")," includes a part ",(0,r.yg)("inlineCode",{parentName:"p"},"Trafic light 2")," which has parameters for the color of the top light and the color of the bottom light. Instead of controlling the colors of both the top and bottom light we use a parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"state"),", which can be ",(0,r.yg)("inlineCode",{parentName:"p"},"stop"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"prepare")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"proceed"),". Three ",(0,r.yg)("inlineCode",{parentName:"p"},"if")," statements are used to set the color of the top and bottom light, depending on the state."),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(93030).A,width:"1200",height:"750"})),(0,r.yg)("p",null,"There are topics for the left and right-hand light of the lake entrance of the dock. The state of both lights are controlled by the topic ",(0,r.yg)("inlineCode",{parentName:"p"},"lock.bru.lake.light.state"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"lock.bru.lake.light.state: 'stop'\nlock.bru.lake.light.right.geometry: T06.Light lock(lock.bru.lake.light.state)\nlock.bru.lake.light.right.translation: -109, 4, 8\nlock.bru.lake.light.right.rotation: 0, 0, 180\nlock.bru.lake.light.right.scale: 2, 2, 2\n")),(0,r.yg)("h2",{id:"barrier"},"Barrier"),(0,r.yg)("p",null,"There are two sets of road barriers for the draw bridge and for the roll bridge. The solid ",(0,r.yg)("inlineCode",{parentName:"p"},"Barrier set")," includes two solids ",(0,r.yg)("inlineCode",{parentName:"p"},"Barrier"),", with a parameter ",(0,r.yg)("inlineCode",{parentName:"p"},"angle"),", and two solids ",(0,r.yg)("inlineCode",{parentName:"p"},"Traffic pole bridge"),", with a parameter for the color of the light. "),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(35898).A,width:"1200",height:"750"})),(0,r.yg)("p",null,"The topics for the position and status of the right lakeside barrier include the color of the light and the angle of the barrier as a percentage between ",(0,r.yg)("inlineCode",{parentName:"p"},"0")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"100"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"lock.bru.lake.barrier.angle: 0\nlock.bru.lake.barrier.color: 'red'\nlock.bru.lake.barrier.right.geometry: Infra.Barrier set(lock.bru.lake.barrier.angle * 0.9, lock.bru.lake.barrier.color)\nlock.bru.lake.barrier.right.translation: -95, -10, 10.5\nlock.bru.lake.barrier.right.rotation: 0, 0, 270\n")),(0,r.yg)("h2",{id:"dam"},"Dam"),(0,r.yg)("p",null,"The shape of the dam is created by a solid ",(0,r.yg)("inlineCode",{parentName:"p"},"Base")," for the shape of the lock. This shape is created by extruding a profile with the shape of the slanted terrain and the channel in the lock. Some other wedges and blocks are added to the left and right as a base for the road."),(0,r.yg)("p",null,(0,r.yg)("img",{src:a(71992).A,width:"1200",height:"750"})),(0,r.yg)("p",null,"Note that this solid does not have any parameters. Instead of linking the geometry to the name of the script we can include a static glTF file. This file is automatically created when the solid is saved. The advantage of using static glTF files over solids is that the rendering is faster."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-javascript"},"lock.bru.terrain.geometry: T06.Dam.gltf,\n")))}g.isMDXComponent=!0},35898:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/animation_lock_barrier_set-4fe9befc7313af3bba03c63960acda5e.png"},69515:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/animation_lock_bridge-859f4e7aa02a206f5e0dc9cdffef7182.png"},71992:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/animation_lock_dam-a9bf15f3589f32f3051221f73f39d504.png"},29597:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/animation_lock_door_set-8323dc88fdf28e95816c44550f97af87.png"},93030:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/animation_lock_light-3582e0b74421e97ba10ad327fafab135.png"}}]);