"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8189],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,g=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},91052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(58168),i=(n(96540),n(15680));const r={sidebar_position:200},o="Interactive SVG",s={unversionedId:"drawings/interactive",id:"drawings/interactive",title:"Interactive SVG",description:"In the previous sections we have shown how to create parametric SVG drawings that can reconfigure themselves based on IoT parameters. In this section we will show how to create interactive drawings that can reconfigure themselves based on user input by defining links in the drawing.",source:"@site/docs/drawings/interactive.md",sourceDirName:"drawings",slug:"/drawings/interactive",permalink:"/docs/drawings/interactive",draft:!1,tags:[],version:"current",sidebarPosition:200,frontMatter:{sidebar_position:200},sidebar:"defaultSidebar",previous:{title:"Libraries",permalink:"/docs/drawings/libraries"},next:{title:"IFC",permalink:"/docs/buildings/ifc"}},l={},p=[{value:"Seat Selector",id:"seat-selector",level:2},{value:"Irrigation diagram",id:"irrigation-diagram",level:2},{value:"URL",id:"url",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"interactive-svg"},"Interactive SVG"),(0,i.yg)("p",null,"In the previous sections we have shown how to create parametric SVG drawings that can reconfigure themselves based on IoT parameters. In this section we will show how to create interactive drawings that can reconfigure themselves based on user input by defining links in the drawing."),(0,i.yg)("h2",{id:"seat-selector"},"Seat Selector"),(0,i.yg)("p",null,"This example shows how to create a seat selector that updates itself after the user clicks on a seat. The state of the seat selector is stored in a variable called 'occupied'. This variable is a string of comma separated seat numbers. The seat numbers consist of a row number and a seat number (A-F). The seats are generated by two loops. Inside the loop the seat number (e.g. \"3A\") is generated. If the seat number is included in the variable 'occupied' the background color is changed to 'grey'. Otherwise the background color is changed to 'light green'. If the seat number is not included in the variable 'occupied' a ",(0,i.yg)("inlineCode",{parentName:"p"},"link")," is created that represents the new state of the variable 'occupied'. This is done by adding the seat number to the string 'occupied'. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'link("\'" + occupied + "\', \'" + label + "\'")\n')),(0,i.yg)("p",null,"So of the user clicks on the seat ",(0,i.yg)("inlineCode",{parentName:"p"},"6A"),", the variable 'occupied' is set to ",(0,i.yg)("inlineCode",{parentName:"p"},"1A, 1B, 2A, 7E, 7F, 6A"),". The SVG is automatically generated based on the new value of the variable 'occupied'. In the example below the seats ",(0,i.yg)("inlineCode",{parentName:"p"},"1A, 1B, 2A, 7E, 7F")," are market as occupied because of the default value of ",(0,i.yg)("inlineCode",{parentName:"p"},"occupied"),". The user subsequently clicks on ",(0,i.yg)("inlineCode",{parentName:"p"},"6A")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"6B")," and the SVG is automatically updated to reflect the new value of ",(0,i.yg)("inlineCode",{parentName:"p"},"occupied"),"."),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(50741).A,width:"2500",height:"1500"})),(0,i.yg)("h2",{id:"irrigation-diagram"},"Irrigation diagram"),(0,i.yg)("p",null,"This example shows how to create an irrigation diagram that can be reconfigured based on user input. The state of the diagram is stored in the variable ",(0,i.yg)("inlineCode",{parentName:"p"},"state"),". This is an object with fields for the value of the pump and three valves. In this example, the values ",(0,i.yg)("inlineCode",{parentName:"p"},"0")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"1")," mean ",(0,i.yg)("inlineCode",{parentName:"p"},"off")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"on")," for the pump and ",(0,i.yg)("inlineCode",{parentName:"p"},"closed")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"open")," for the valves. Depending on the state of the pump, the line color to the three valves are ",(0,i.yg)("inlineCode",{parentName:"p"},"blue")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"black"),". A ",(0,i.yg)("inlineCode",{parentName:"p"},"link")," statement is used specify the new state of the user clicks on the part called ",(0,i.yg)("inlineCode",{parentName:"p"},"Pump"),". In this example we use the JavaScript spread operator, which sets the new value of ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," by copying all fields from the current value using the ",(0,i.yg)("inlineCode",{parentName:"p"},"...")," operator. A ternary statement is used to toggle the value of the pump depending on the current value."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-javascript"},'{\n    translate(100,10)\n    link({...state, pump: pump === 1 ? 0 : 1})\n    part("Pump")\n}\n')),(0,i.yg)("p",null,"When a ",(0,i.yg)("inlineCode",{parentName:"p"},"link")," function is called, the link is added to all geometry that is created next, in this case it is added to all elements in the part. To cancel adding links you can either call the function again with an empty value ",(0,i.yg)("inlineCode",{parentName:"p"},'link("")')," or enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"link")," statement inside a block statement as shown above. Like with other settings such as ",(0,i.yg)("inlineCode",{parentName:"p"},"fill")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"color"),", the link is only applied to elements created in the block statement. In the example below the first valve is set to ",(0,i.yg)("inlineCode",{parentName:"p"},"1")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"open")," and the other two valves are closed. Then the user clicks on the second and third valve their status is toggled. The SVG is automatically updated to reflect the new value of ",(0,i.yg)("inlineCode",{parentName:"p"},"state")," by showing the flow of water as blue lines. When the user clicks on the ",(0,i.yg)("inlineCode",{parentName:"p"},"pump"),", the pump is shut off and the water flow is stopped."),(0,i.yg)("p",null,(0,i.yg)("img",{src:n(84461).A,width:"2500",height:"1500"})),(0,i.yg)("h2",{id:"url"},"URL"),(0,i.yg)("p",null,"When the design of the drawing is complete, you can embed the SVG in a web page using an ",(0,i.yg)("inlineCode",{parentName:"p"},"<img>")," tag. You can open the URL directly in a web browser with an optional parameter that defines the initial state. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"http://localhost:8010/drawings/svg/Irrigation({pump:0,valve1:1})\n")))}u.isMDXComponent=!0},84461:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/drawings_interactive_irrigation-d797ab7c77714599cdbbd601ffafd810.png"},50741:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/drawings_interactive_seatselector-781a0b2044ad37ddffcd492d60250f1d.png"}}]);