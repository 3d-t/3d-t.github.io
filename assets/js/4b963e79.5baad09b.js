"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2248],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(t),g=r,m=c["".concat(d,".").concat(g)]||c[g]||u[g]||i;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=g;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8752:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(9668),r=(t(6540),t(5680));const i={sidebar_position:600},o="Arduino - MQTT",l={unversionedId:"integrations/arduino",id:"integrations/arduino",title:"Arduino - MQTT",description:"Arduino is an open-source electronics platform based on easy-to-use hardware and software. Arduino boards are able to read inputs - light on a sensor, a finger on a button, or a Twitter message - and turn it into an output - activating a motor, turning on an LED, publishing something online. In this tutorial we show how an Arduino MKR1000 can be used to collect temperature and humididy data and store the data on an SD card. When a WIFI connection is available the data is sent to an MQTT server. The Arduino integration uses the standard MQTT import module. The application that is running on the board is written in the Arduino C++ implementation.",source:"@site/docs/integrations/arduino.md",sourceDirName:"integrations",slug:"/integrations/arduino",permalink:"/docs/integrations/arduino",draft:!1,tags:[],version:"current",sidebarPosition:600,frontMatter:{sidebar_position:600},sidebar:"defaultSidebar",previous:{title:"People counter",permalink:"/docs/integrations/counter"},next:{title:"ESP32 - GPS Tracker",permalink:"/docs/integrations/esp32"}},d={},s=[{value:"Hardware",id:"hardware",level:2},{value:"Setup",id:"setup",level:3},{value:"Reading sensor data",id:"reading-sensor-data",level:3},{value:"Storing sensor data on SD card",id:"storing-sensor-data-on-sd-card",level:3},{value:"Sending sensor data to MQTT server",id:"sending-sensor-data-to-mqtt-server",level:3},{value:"Connect to an NTP time server",id:"connect-to-an-ntp-time-server",level:3},{value:"Configuration",id:"configuration",level:2}],p={toc:s},c="wrapper";function u(e){let{components:n,...i}=e;return(0,r.yg)(c,(0,a.A)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"arduino---mqtt"},"Arduino - MQTT"),(0,r.yg)("p",null,"Arduino is an open-source electronics platform based on easy-to-use hardware and software. Arduino boards are able to read inputs - light on a sensor, a finger on a button, or a Twitter message - and turn it into an output - activating a motor, turning on an LED, publishing something online. In this tutorial we show how an Arduino MKR1000 can be used to collect temperature and humididy data and store the data on an SD card. When a WIFI connection is available the data is sent to an MQTT server. The Arduino integration uses the standard MQTT import module. The application that is running on the board is written in the Arduino C++ implementation."),(0,r.yg)("h2",{id:"hardware"},"Hardware"),(0,r.yg)("p",null,"The Arduino MKR has analog and digital ports. Power can be supplied by a USB or a LIPO battery and the battery is charged when USB power is present. The pin layout is displayed below. "),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(7335).A,width:"2493",height:"1565"})),(0,r.yg)("p",null,"First we connect a DHT11 temperature and humidity sensor. The signal is connected to the digital input D1. "),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Arduino MKR1000"),(0,r.yg)("th",{parentName:"tr",align:null},"DHT11"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"D1"),(0,r.yg)("td",{parentName:"tr",align:null},"Signal")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"VCC"),(0,r.yg)("td",{parentName:"tr",align:null},"VCC")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"GND"),(0,r.yg)("td",{parentName:"tr",align:null},"GND")))),(0,r.yg)("p",null,"We also include a micro SD card to store the sensor values locally."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Arduino MKR1000"),(0,r.yg)("th",{parentName:"tr",align:null},"MicroSD"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"D8 MOSI"),(0,r.yg)("td",{parentName:"tr",align:null},"MOSI")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"D9 SCK"),(0,r.yg)("td",{parentName:"tr",align:null},"SCK")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"D10 MISO"),(0,r.yg)("td",{parentName:"tr",align:null},"MISO")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"D4"),(0,r.yg)("td",{parentName:"tr",align:null},"CS")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"VCC"),(0,r.yg)("td",{parentName:"tr",align:null},"VCC")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"GND"),(0,r.yg)("td",{parentName:"tr",align:null},"GND")))),(0,r.yg)("p",null,"For testing purposes you can use a breadbord with jumpers. An example is displayed below."),(0,r.yg)("p",null,(0,r.yg)("img",{src:t(8844).A,width:"1755",height:"975"})),(0,r.yg)("h3",{id:"setup"},"Setup"),(0,r.yg)("p",null,"Next connect the board to your computer using a USB cable use the ",(0,r.yg)("a",{parentName:"p",href:"https://www.arduino.cc/en/Guide"},"Arduino IDE")," to upload the configuration to the board. In the headers and setup the libraries for the sensor are included and the WIFI and SD card are initialized. The time is set using an NTP time server. Make sure you enter the name of the WIFI network in ",(0,r.yg)("inlineCode",{parentName:"p"},"WIFI_NETWORK_2G")," and the password in ",(0,r.yg)("inlineCode",{parentName:"p"},"WIFI_PASSWORD"),". "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},'#include <DHT.h>\n#include <DHT_U.h>\n#include <PubSubClient.h>\n#include <SD.h>\n#include <SPI.h>\n#include <Time.h>\n#include <TimeLib.h>\n#include <WiFi101.h>\n#include <WiFiClient.h>\n#include <WiFiServer.h>\n#include <WiFiUdp.h>\n\n#include "dht.h"\n#define DHTPIN 1\n#define DHTTYPE DHT11\n\n#define WIFI_NETWORK_2G "" \n#define WIFI_PASSWORD ""\n#define TOPIC "arduino/room/325"\n\nchar mqttServer[] = "broker.emqx.io";\nstatic const char ntpServerName[] = "us.pool.ntp.org";\nconst int timeZone = 1;  // Central European Time\nconst int chipSelect = 4;\n\nDHT dht(DHTPIN, DHTTYPE);\nWiFiClient net;\nPubSubClient client(net);\ntime_t getNtpTime();\nWiFiUDP Udp;\nFile dataFile;\nunsigned int localPort = 8888;\n\nvoid setup() {\n    Serial.begin(9600);\n    Serial.println("Connected");\n    WiFi.hostname("Arduino");\n    WiFi.begin(WIFI_NETWORK_2G, WIFI_PASSWORD);\n    Serial.println("Begin...");\n    client.setServer(mqttServer, 1883);\n    Serial.println("Starting UDP");\n    Udp.begin(localPort);\n    Serial.print("Local port: ");\n    Serial.println("waiting for sync");\n    setSyncProvider(getNtpTime);\n    setSyncInterval(300);\n    SD.begin(chipSelect);\n}\n')),(0,r.yg)("p",null,"The loop includes a function that collects the data from the sensor, a function that logs the data to the SD card and a function that synchronizes the data with an MQTT server if there is a WIFI connection."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},"void loop() {    \n    String payload = read();\n    log(payload);\n    sync();\n    delay(5000);\n}\n")),(0,r.yg)("h3",{id:"reading-sensor-data"},"Reading sensor data"),(0,r.yg)("p",null,"The sensor data is read from the sensor and converted into a JSON payload:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},'String read() {\n    int h = dht.readHumidity();\n    int t = dht.readTemperature();\n\n    if (isnan(h) || isnan(t)) {\n        Serial.println("Failed to read from DHT sensor!");\n        return "{}";\n    }\n\n    int hic = dht.computeHeatIndex(t, h, false);\n\n    String date = "";\n    date += year();\n    date += "-";\n    date += month() < 10 ? "0" : "";\n    date += month();\n    date += "-";\n    date += day() < 10 ? "0" : "";\n    date += day();\n    date += hour() < 10 ? " 0" : " ";\n    date += hour();\n    date += ":";\n    date += minute() < 10 ? "0" : "";\n    date += minute();\n    date += ":";\n    date += second() < 10 ? "0" : "";\n    date += second();\n\n    String payload = "{";\n    payload += "\\"room\\": \\"325\\",";\n    payload += "\\"time\\":\\"";\n    payload += date;\n    payload += "\\",";\n    payload += "\\"temperature\\":\\"";\n    payload += t;\n    payload += "\\",";\n    payload += "\\"humidity\\":\\"";\n    payload += h;\n    payload += "\\"}";\n    return payload;\n}\n')),(0,r.yg)("h3",{id:"storing-sensor-data-on-sd-card"},"Storing sensor data on SD card"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"log")," function writes the data to two files. The ",(0,r.yg)("inlineCode",{parentName:"p"},"log.txt")," file is for permanent storage and the ",(0,r.yg)("inlineCode",{parentName:"p"},"cache.txt")," file is for temporary storage until the data has been streamed to an MQTT server. "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},'void log(String payload) {\n    dataFile = SD.open("cache.txt", FILE_WRITE);\n    if (dataFile) {\n        dataFile.println(payload);\n        dataFile.close();\n    } else {\n        Serial.println("error opening datalog.txt");\n    }\n    dataFile = SD.open("log.txt", FILE_WRITE);\n    if (dataFile) {\n        dataFile.println(payload);\n        dataFile.close();\n    } else {\n        Serial.println("error opening datalog.txt");\n    }\n    Serial.print("Log: ");\n    Serial.println(payload);\n}\n')),(0,r.yg)("h3",{id:"sending-sensor-data-to-mqtt-server"},"Sending sensor data to MQTT server"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"sync")," function checks if there is a WIFI connection and a connection to the MQTT server. If this is the case the data is read from the ",(0,r.yg)("inlineCode",{parentName:"p"},"cache.txt")," file and sent to the MQTT server. Each line is a separate message. After all lines have been processed the ",(0,r.yg)("inlineCode",{parentName:"p"},"cache.txt")," is deleted."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},'\n// Connect to WIFI and MQTT\nvoid sync() {\n    if (WiFi.status() != WL_CONNECTED) {\n        WiFi.begin(WIFI_NETWORK_2G, WIFI_PASSWORD);\n    }\n    if (WiFi.status() != WL_CONNECTED) {\n        Serial.println("Wifi: disconnected");\n        return;\n    }\n    Serial.println("Wifi: connected");\n    client.setServer(mqttServer, 1883);\n    client.disconnect();\n    client.connect("Arduino Uno Device", "", "");\n    if (!client.connected()) {\n        Serial.println("MQTT: disconnected");\n        return;\n    }\n    Serial.println("MQTT: connected");\n\n    dataFile = SD.open("cache.txt", FILE_READ);\n\n    char line[100];\n    int index = 0;\n    bool published = false;\n    while (dataFile.available()) {\n        char c = dataFile.read();\n        if (c != \'\\n\' && c != \'\\r\') {\n            line[index] = c;\n            index++;\n        } else {\n            if (index > 0) {\n                Serial.print("Publish ");\n                published = client.publish(TOPIC, line, true);\n                Serial.print(line);\n                Serial.println();\n            }\n            index = 0;\n        }\n    }\n    dataFile.close();\n    if (published) {\n        bool removed = SD.remove("cache.txt");\n        Serial.println("Cleared cache");\n    }\n}\n')),(0,r.yg)("h3",{id:"connect-to-an-ntp-time-server"},"Connect to an NTP time server"),(0,r.yg)("p",null,"The time is retreived from an NTP server using the functions below."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-c"},'\n// Get time from NTP server\nconst int NTP_PACKET_SIZE = 48;      // NTP time is in the first 48 bytes of message\nbyte packetBuffer[NTP_PACKET_SIZE];  //buffer to hold incoming & outgoing packets\ntime_t getNtpTime() {\n    IPAddress ntpServerIP;  // NTP server\'s ip address\n\n    while (Udp.parsePacket() > 0)\n        ;  // discard any previously received packets\n    Serial.println("Transmit NTP Request");\n    // get a random server from the pool\n    WiFi.hostByName(ntpServerName, ntpServerIP);\n    Serial.print(ntpServerName);\n    Serial.print(": ");\n    Serial.println(ntpServerIP);\n    sendNTPpacket(ntpServerIP);\n    uint32_t beginWait = millis();\n    while (millis() - beginWait < 1500) {\n        int size = Udp.parsePacket();\n        if (size >= NTP_PACKET_SIZE) {\n            Serial.println("Receive NTP Response");\n            Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer\n            unsigned long secsSince1900;\n            // convert four bytes starting at location 40 to a long integer\n            secsSince1900 = (unsigned long)packetBuffer[40] << 24;\n            secsSince1900 |= (unsigned long)packetBuffer[41] << 16;\n            secsSince1900 |= (unsigned long)packetBuffer[42] << 8;\n            secsSince1900 |= (unsigned long)packetBuffer[43];\n            return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;\n        }\n    }\n    Serial.println("No NTP Response :-(");\n    return 0;  // return 0 if unable to get the time\n}\n\n\n// Send an NTP request to the time server at the given address\nvoid sendNTPpacket(IPAddress &address) {\n    memset(packetBuffer, 0, NTP_PACKET_SIZE);\n    packetBuffer[0] = 0b11100011;  // LI, Version, Mode\n    packetBuffer[1] = 0;           // Stratum, or type of clock\n    packetBuffer[2] = 6;           // Polling Interval\n    packetBuffer[3] = 0xEC;        // Peer Clock Precision\n    packetBuffer[12] = 49;\n    packetBuffer[13] = 0x4E;\n    packetBuffer[14] = 49;\n    packetBuffer[15] = 52;\n    Udp.beginPacket(address, 123);  //NTP requests are to port 123\n    Udp.write(packetBuffer, NTP_PACKET_SIZE);\n    Udp.endPacket();\n}\n')),(0,r.yg)("p",null,"When the code is loaded on the card you can use the serial monitor to view the output. You can check if the data is received by the MQTT server by subscribing to the ",(0,r.yg)("inlineCode",{parentName:"p"},"TOPIC")," defined in the header."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"mosquitto_sub -h broker.emqx.io -v -t 'arduino/room/325/#'\n")),(0,r.yg)("h2",{id:"configuration"},"Configuration"),(0,r.yg)("p",null,"Create a new secret to store the MQTT server and topic:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"name: Arduino\nfields:\n  - name: mqtt\n    value: broker.emqx.io\n  - name: topic\n    value: arduino/room/325\n")),(0,r.yg)("p",null,"Create an importer to map the MQTT topic to an internal topic:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"name: Arduino\ncontext: Arduino\ndata: `\nobject, topic\narduino/room/325, room325\n`\ncron: '* * * * * *'\n")))}u.isMDXComponent=!0},8844:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/datalogger-breadbord-d0d482f2bf24c2d7896414431bdb85c9.png"},7335:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/mkr1000-pinout-586d50067f1f65a652a135604f5398da.png"}}]);