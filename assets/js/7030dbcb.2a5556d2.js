(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2701],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9891:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a=["components"],s={sidebar_position:10},c="Fritzbox",p={unversionedId:"integrations/fritzbox",id:"integrations/fritzbox",isDocsHomePage:!1,title:"Fritzbox",description:"A router can be used to detect if somebody is present at a location with a WIFI network. The Fritzbox integration connects to the router and retreives a list of devices that are connected.",source:"@site/docs/integrations/fritzbox.md",sourceDirName:"integrations",slug:"/integrations/fritzbox",permalink:"/docs/integrations/fritzbox",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"defaultSidebar",previous:{title:"OpenWeather",permalink:"/docs/integrations/openweather"},next:{title:"Zwave",permalink:"/docs/integrations/zwave"}},l=[{value:"Script",id:"script",children:[]},{value:"Datasource",id:"datasource",children:[]},{value:"Importer",id:"importer",children:[]}],u={toc:l};function d(e){var t=e.components,s=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fritzbox"},"Fritzbox"),(0,i.kt)("p",null,"A router can be used to detect if somebody is present at a location with a WIFI network. The Fritzbox integration connects to the router and retreives a list of devices that are connected."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Usage: Detect if people are present at a location. ")),(0,i.kt)("h2",{id:"script"},"Script"),(0,i.kt)("p",null,"Create a new script with name ",(0,i.kt)("inlineCode",{parentName:"p"},"Fritzbox"),". The script first connects to the router with the username to request a token called ",(0,i.kt)("inlineCode",{parentName:"p"},"Challenge"),". This token is combined with the password and encoded to a UTF-16LE string. This is used to request a token and the response is an XML file. The XML is converted to JSON and the session is ",(0,i.kt)("inlineCode",{parentName:"p"},"SID")," is obtained. In a third call the state of the router is requested via an HTTP request. If the object passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"get")," functions is found in the ",(0,i.kt)("inlineCode",{parentName:"p"},"net.devices")," JSON array the value is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", or else ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"class Fritzbox {\n\n    init = (context) => {\n        this.context = context\n    }\n\n    get = async (object) => {\n        let connected = await this.objects()\n        let home = connected.find(item => item.name === object) ? 1: 0\n        return {object: object, home: home}\n    }\n\n    objects = async () => {\n        var sid = await this.sid();\n        var res = await http.get(this.context.host + '/data.lua?sid=' + sid, \"1 minute\")\n        var devices = res.data.net.devices;\n        return devices\n    }\n\n    sid = async () => {\n        var response = await http.get(this.context.host + '/login_sid.lua?username=' + this.context.username, \"1 minute\");\n        var json = await xml.toJson(response).then(result => {return(result)}).catch(err=>error(err));\n        var challenge = json.SessionInfo.Challenge;\n        var token = encryption.encode(challenge + '-' + this.context.password, \"UTF-16LE\");\n        token = encryption.md5(token)\n        response = await http.get(this.context.host + '/login_sid.lua?username=' + this.context.username + '&response='+challenge+'-'+token, \"1 minute\");\n        json = await xml.toJson(response).then(result => {return(result)}).catch(err=>error(err));\n        return json.SessionInfo.SID\n    }\n}\n")),(0,i.kt)("p",null,"Note that you can test the script before running the importer. To paste the code below in the ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," field of the script and click ",(0,i.kt)("inlineCode",{parentName:"p"},"Run"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"let fritzbox = new Fritzbox()\nfritzbox.init(await encryption.secret('Fritzbox'));\nvar i = await fritzbox.get('iPhonevanEsther')\nprint(JSON.stringify(i))\n")),(0,i.kt)("h2",{id:"datasource"},"Datasource"),(0,i.kt)("p",null,"Create a new secret with a ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"script")," and fields for the ",(0,i.kt)("inlineCode",{parentName:"p"},"host"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," should be the URL to the admin port of the router, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"https://fritzbox.mydomain.com:1443"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(362).Z})),(0,i.kt)("h2",{id:"importer"},"Importer"),(0,i.kt)("p",null,"Create a new importer and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"Datasource")," to the secret that defines the Fritzbox connection. Add one or more objects for which the script should be called. The field ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")," should contain the name of the device as it is registed with the router, typically the name of the smartphone."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7330).Z})))}d.isMDXComponent=!0},7330:function(e,t,n){"use strict";t.Z=n.p+"assets/images/importer_fritzbox-11ac1f95d288a82d992b2c1528f94cb1.png"},362:function(e,t,n){"use strict";t.Z=n.p+"assets/images/secret_fritzbox-dda4929c84ca10d6c2842eb912415e79.png"}}]);