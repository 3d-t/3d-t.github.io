"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8739],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>u});var a=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||r;return t?a.createElement(u,i(i({ref:n},p),{},{components:t})):a.createElement(u,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},77652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(58168),o=(t(96540),t(15680));const r={sidebar_position:40},i="Transformation",s={unversionedId:"visualization/transformation",id:"visualization/transformation",title:"Transformation",description:"In this section, we explain how you can apply transformations to 3D objects in a digital twin. For example, you can show the current position of vehicles in a factory, open or close a bridge, show the current position of an elevator in a building, or open a door. Transformations are implemented by converting IoT parameters to transformations of objects and parts in a 3D model.",source:"@site/docs/visualization/transformation.md",sourceDirName:"visualization",slug:"/visualization/transformation",permalink:"/docs/visualization/transformation",draft:!1,tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Light",permalink:"/docs/visualization/lights"},next:{title:"Scaling",permalink:"/docs/visualization/scaling"}},l={},c=[{value:"Solids",id:"solids",level:2},{value:"Topics",id:"topics",level:2},{value:"Model",id:"model",level:2},{value:"Explanation",id:"explanation",level:2}],p={toc:c},d="wrapper";function m(e){let{components:n,...r}=e;return(0,o.yg)(d,(0,a.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"transformation"},"Transformation"),(0,o.yg)("p",null,"In this section, we explain how you can apply transformations to 3D objects in a digital twin. For example, you can show the current position of vehicles in a factory, open or close a bridge, show the current position of an elevator in a building, or open a door. Transformations are implemented by converting IoT parameters to transformations of objects and parts in a 3D model."),(0,o.yg)("h2",{id:"solids"},"Solids"),(0,o.yg)("p",null,"This example shows how IoT parameters stored in topics can be used to translate and rotate objects in a small crane, or cherry picker. The body of the crane is constructed from a block and a raised cylinder near the edge as shown below. The two objects are shrink-wrapped into a new body using the ",(0,o.yg)("inlineCode",{parentName:"p"},"Hull")," operation."),(0,o.yg)("p",null,(0,o.yg)("img",{src:t(533).A,width:"1200",height:"750"})),(0,o.yg)("p",null,"The crane object includes a part ",(0,o.yg)("inlineCode",{parentName:"p"},"Arm")," that can be rotated in two directions and that can be extended so that the grey inner shaft moves out of the yellow outer shaft."),(0,o.yg)("p",null,(0,o.yg)("img",{src:t(27669).A,width:"1200",height:"750"})),(0,o.yg)("h2",{id:"topics"},"Topics"),(0,o.yg)("p",null,"The example shows a model with two cranes in a parking place. The topic for the first crane is ",(0,o.yg)("inlineCode",{parentName:"p"},"parking.T01.crane_1"),". You can move the crane by specifying a ",(0,o.yg)("inlineCode",{parentName:"p"},"translation")," subtopic with the x-, y-, and z-values for the translation relative to the origin. The topic for the second crane points to the same GLTF model and does not have any translation so it will be positioned at the origin."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"parking.T01.crane_1.geometry = Crane.gltf\nparking.T01.crane_1.translation = 5, 12, 0\nparking.T01.crane_2.geometry = Crane.gltf\n\n")),(0,o.yg)("p",null,"You can now rotate the part ",(0,o.yg)("inlineCode",{parentName:"p"},"Arm")," of the crane assembly by creating a subtopic ",(0,o.yg)("inlineCode",{parentName:"p"},"arm.node")," that links to the part that should be rotated and a subtopic ",(0,o.yg)("inlineCode",{parentName:"p"},"arm.node")," that specifies the amount of rotation in x-, y-, and z-direction."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"parking.T01.crane_1.arm.node = Arm\nparking.T01.crane_1.arm.rotation = 0, 30, 45\n")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Arm")," part includes another part ",(0,o.yg)("inlineCode",{parentName:"p"},"Extension")," that can move in and out of the yellow arm. For this node, you can set the extension by setting the y-value to ",(0,o.yg)("inlineCode",{parentName:"p"},"3"),". "),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"parking.T01.crane_1.extension.node = Extension\nparking.T01.crane_1.translation = 0, 3, 0\n")),(0,o.yg)("h2",{id:"model"},"Model"),(0,o.yg)("p",null,"Create a new model and include the topics for the parking and the two cranes. The transformations defined in the subtopics for the first crane are applied so that the crane is moved on the parking, the arm is rotated counterclockwise and is rotated upwards. The arm extension with the basket is moved out 3 units. If you click on the crane you see the current values in the topics. If the values change, the model will be adjusted."),(0,o.yg)("p",null,(0,o.yg)("img",{src:t(29580).A,width:"1200",height:"750"})),(0,o.yg)("h2",{id:"explanation"},"Explanation"),(0,o.yg)("p",null,"A GLTF model has an internal hierarchy, a so-called tree of nodes. When applying a translation or rotation to a node all child nodes are translated or rotated as well. For example, when a translation is applied to the whole model is moved. When a rotation is applied to the arm, the extension and basket are also rotated because they are part of the arm. Both cranes have a link to the same GTLF model and ",(0,o.yg)("inlineCode",{parentName:"p"},"crane_1")," also has additional transformation to certain nodes in the model. "),(0,o.yg)("mermaid",{value:"flowchart \n    direction TB\n    subgraph Topics\n        Crane_1[.crane_1]\n        Crane_2[.crane_2]\n        Arm[.arm]\n        Extension[.extension]\n        Crane_2 --\x3e Geometry2[.geometry]\n        Crane_1 --\x3e Geometry[.geometry]\n        Crane_1 --\x3e Translation[.translation]\n        Crane_1 --\x3e Arm\n        Crane_1 --\x3e Extension\n        Arm --\x3e Node[.node]\n        Arm --\x3e Rotation[.rotation]\n        Extension --\x3e NodeE[.node]\n        Extension --\x3e TranslationE[.translation]\n    end\n    subgraph GLTF\n        direction TB\n        GLTFCrane[Crane\\ntransformation]\n        GLTFArm[Arm\\ntransformation]\n        GLTFExtension[Extension\\ntransformation]\n        GLTFCrane --\x3e GLTFArm\n        GLTFArm --\x3e GLTFExtension\n    end\n    Translation --\x3e GLTFCrane\n    Geometry --\x3e GLTFCrane\n    Geometry2 --\x3e GLTFCrane\n    Node --\x3e GLTFArm\n    NodeE --\x3e GLTFExtension\n    Rotation --\x3e GLTFArm\n    TranslationE --\x3e GLTFExtension"}))}m.isMDXComponent=!0},29580:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/visualization_model_parking-718d4aa748de0f82097d0709ac47b95d.png"},27669:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/visualization_solid_crane-e6d96ff7038b3ec78954f48b30fc9554.png"},533:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/visualization_solid_hull-1966d7ece22df5c440fff5bcba883d8e.png"}}]);