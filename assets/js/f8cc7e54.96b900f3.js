(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4398],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||l[f]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4613:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],c={sidebar_position:1},s="Architecture",u={unversionedId:"technology/architecture",id:"technology/architecture",isDocsHomePage:!1,title:"Architecture",description:"The environment is designed to run on low-cost ARM hardware such as Raspberry PI or Odroid and on cloud platforms such as AWS or Google Cloud Platform. All frontend and backend modules are implemented as Docker containers running in a Kubernetes environment. Helm is used to facilitate easy installation and automatic rolling upgrades without downtime.",source:"@site/docs/technology/architecture.md",sourceDirName:"technology",slug:"/technology/architecture",permalink:"/docs/technology/architecture",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"JavaScript",permalink:"/docs/reference/javascript"},next:{title:"Software stack",permalink:"/docs/technology/stack"}},d=[{value:"Microfrontend",id:"microfrontend",children:[]},{value:"Backend services",id:"backend-services",children:[]}],l={toc:d};function p(e){var n=e.components,c=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,c,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,"The environment is designed to run on low-cost ARM hardware such as Raspberry PI or Odroid and on cloud platforms such as AWS or Google Cloud Platform. All frontend and backend modules are implemented as Docker containers running in a Kubernetes environment. Helm is used to facilitate easy installation and automatic rolling upgrades without downtime. "),(0,a.kt)("h2",{id:"microfrontend"},"Microfrontend"),(0,a.kt)("p",null,"The frontend modules run on a standard web browser as a PWA (Progressive Web Application) and communicate with the backend via REST and Websockets. The frontend is split up into three different modules that are integrated as microfrondends in a single container. This facilitates modular development of frontend modules and avoid having to download large packages such as for visual programming or 3D modeling and animation when users just need to submit a form of view a panel. "),(0,a.kt)("h2",{id:"backend-services"},"Backend services"),(0,a.kt)("p",null,"The server environment includes a set of microservices that are deployed on a kubernetes cluster. Users can access the service using a web browser or app running on a smartphone. Systems can access the service via a REST API. All data and documents are stored in a Mongo database. When the app is running on a smartphone nearby Bluetooth devices can be accessed and data is streamed to the server. IoT devices can push data via the MQTT protocol. Zwave and Zigbee devices are supported via a ZWave2MQTT and Zigbee2MQTT bridges. Third-party services can be integrated via plugins. These plugins are microservices are packages as docker containers and can be written in any language such as Javascript, Python, C++, Go or Rust."),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(822).Z})))}p.isMDXComponent=!0},822:function(e,n,t){"use strict";n.Z=t.p+"assets/images/frontend-backend-b258b4f8a0f5e713a304bcc81fc7f26e.png"}}]);