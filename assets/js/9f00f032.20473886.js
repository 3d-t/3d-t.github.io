(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1695],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1149:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:6},l="MQTT Broker",c={unversionedId:"installation/mqtt",id:"installation/mqtt",isDocsHomePage:!1,title:"MQTT Broker",description:"MQTT is a lightweight protocol for sending IoT data and messages over the internet. It is a publish and subscribe protocol where a device publishes a message to a topic on an MQTT broker. Other clients can subscribe to the topic and receive updates. The concept of topics can be compared to channels on a radio.",source:"@site/docs/installation/mqtt.md",sourceDirName:"installation",slug:"/installation/mqtt",permalink:"/docs/installation/mqtt",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"defaultSidebar",previous:{title:"External access via SSL",permalink:"/docs/installation/ingress"},next:{title:"Backup",permalink:"/docs/installation/backup"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Authentication",id:"authentication",children:[]},{value:"External access",id:"external-access",children:[]}],u={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mqtt-broker"},"MQTT Broker"),(0,a.kt)("p",null,"MQTT is a lightweight protocol for sending IoT data and messages over the internet. It is a publish and subscribe protocol where a device publishes a message to a topic on an MQTT broker. Other clients can subscribe to the topic and receive updates. The concept of topics can be compared to channels on a radio.\nThere are various public MQTT brokers such as ",(0,a.kt)("a",{parentName:"p",href:"http://mqtt.eclipse.org"},"mqtt.eclipse.org"),", ",(0,a.kt)("a",{parentName:"p",href:"https://test.mosquitto.org"},"test.mosquitto.org")," and ",(0,a.kt)("a",{parentName:"p",href:"https://broker.emqx.io"},"broker.emqx.io"),". These can be used for testing purposes but are insecure: anybody can subscribe to the information that is broadcasted. Setting up a private MQTT broker can be done without much efforts by deploying a chart on your Kubernetes cluster."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you have access to a private MQTT broker you can skip this section.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can download and install an MQTT broker from the ",(0,a.kt)("a",{parentName:"p",href:"https://mosquitto.org/"},"Eclipse Mosquitto")," site and install it as a native service on your server. Alternatively you can use the Kubernetes helm chart to deploy the broker in your Kubernetes cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm install mqtt 3d-t/mqtt\n")),(0,a.kt)("p",null,"After the service has been deployed you can test the MQTT on the local system. You can use a MQTT client such as ",(0,a.kt)("a",{parentName:"p",href:"https://mosquitto.org/download/"},"mosquitto"),". To install the client run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo apt install mosquitto_clients\n")),(0,a.kt)("p",null,"Open a command line end subscribe to a topic 'room/temperature' on the local system:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_sub -t room/temperature\n")),(0,a.kt)("p",null,"Open a second window on the local host and publish a message on the topic 'test':"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_pub -t room/temperature -m 22\n")),(0,a.kt)("p",null,"The message ",(0,a.kt)("inlineCode",{parentName:"p"},"22")," should now appear in the terminal with the subscription."),(0,a.kt)("h2",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"To avoid that anybody can publish and subscribe to messages you can setup username and password authentication. Generate a password file ",(0,a.kt)("inlineCode",{parentName:"p"},"mqtt.yml")," using the ",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto_passwd")," utility:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_passwd -c mqtt.yml bob\nPassword: \nReenter password: \n")),(0,a.kt)("p",null,"The content of the mqtt.yml file includes a single line with the name of the user and the password:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bob:$7$101$v3NUpaLlRvxX/P9t$URFgmd5n4kPhRW5772...\n")),(0,a.kt)("p",null,"Change this password file into a Helm configuration file: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"config:\n  anonymous: false\n  passwd: bob:$7$101$v3NUpaLlRvxX/P9t$URFgmd5n4kPhRW5772...\n")),(0,a.kt)("p",null,"Deploy the mqtt service with the configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"helm uninstall mqtt\nhelm install -f mqtt.yml mqtt 3d-t/mqtt\n")),(0,a.kt)("p",null,"You can now test that you can not publish without password:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_pub -t room/temperature -m 22\nConnection Refused: not authorised.\n")),(0,a.kt)("p",null,"And test you can publish with the password:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mosquitto_pub -u bob -P secret -t room/temperature -m 22\n")),(0,a.kt)("h2",{id:"external-access"},"External access"),(0,a.kt)("p",null,"To make the MQTT server accessible to the outside open a forwarding rule on the router and link the port ",(0,a.kt)("inlineCode",{parentName:"p"},"1883")," to same port on the node where the cluster runs."))}m.isMDXComponent=!0}}]);